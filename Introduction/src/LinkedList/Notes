##Linked Lists are one of the most used data storage structures after arrays.
1. Nodes in LL are self referential class definition. They can contain data or object of class that contains data.
class Link{
    public int data; //data
    public Link next; // reference to next link
}
Link/Node can have any number of data.

2. Double ended list have reference to first node in LL as well as last node. This makes insertLast and deleteLast easy.
3. Linked-List Efficiency: Finding, deleting, or inserting next to a specific item requires searching through, on
                           the average, half the items in the list. This requires O(N) comparisons. An array is
                           also O(N) for these operations, but the linked list is nevertheless faster because
                           nothing needs to be moved when an item is inserted or deleted. The increased efficiency
                           can be significant, especially if a copy takes much longer than a comparison.

4. Compared to arrays LL have better utilization of memory.

##Abstract Data Types
1. It’s a way of looking at a data structure: focusing on what it does and ignoring how it does its job.
2. When would you use a linked list as opposed to an array as the implementation of a
stack or queue?
One consideration is how accurately you can predict the amount of
data the stack or queue will need to hold. If this isn’t clear, the linked list gives you
more flexibility than an array. Both are fast, so speed is probably not a major
consideration.

3. Data Type: a data item with certain characteristics and permissible operations on that data. any class represents a data type,
in the sense that a class is made up of data (fields)
and permissible operations on that data (methods).

4. In object-oriented programming, then, an Abstract Data Type is a class considered
   without regard to its implementation. It’s a description of the data in the class
   (fields), a list of operations (methods) that can be carried out on that data, and
   instructions on how to use these operations. Specifically excluded are the details of
   how the methods carry out their tasks.

##Sorted list: Linked list in which data is stored in sorted order.
1. The advantages of a sorted list over a sorted array are speed of insertion
(because elements don’t need to be moved) and the fact that a list can expand to fill available memory,
while an array is limited to a fixed size.
However, a sorted list is somewhat more difficult to implement than a sorted array.

##Doubly Linked List
1. It allows you to traverse backward as well as upward through the list.
